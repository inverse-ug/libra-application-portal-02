
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ApplicantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  password: 'password',
  emailVerified: 'emailVerified',
  phoneVerified: 'phoneVerified',
  lastLoginAt: 'lastLoginAt',
  loginAttempts: 'loginAttempts',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  firstName: 'firstName',
  middleName: 'middleName',
  surname: 'surname',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  nationality: 'nationality',
  physicalAddress: 'physicalAddress',
  nextOfKinName: 'nextOfKinName',
  nextOfKinRelationship: 'nextOfKinRelationship',
  nextOfKinOccupation: 'nextOfKinOccupation',
  nextOfKinAddress: 'nextOfKinAddress',
  nextOfKinPhone: 'nextOfKinPhone',
  sponsorName: 'sponsorName',
  sponsorRelationship: 'sponsorRelationship',
  sponsorOccupation: 'sponsorOccupation',
  sponsorAddress: 'sponsorAddress',
  sponsorPhone: 'sponsorPhone'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.IntakeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  applicationFee: 'applicationFee',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProgramScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  duration: 'duration',
  tuitionFee: 'tuitionFee',
  requirements: 'requirements',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isShortCourse: 'isShortCourse'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApplicationScalarFieldEnum = {
  id: 'id',
  applicantId: 'applicantId',
  programId: 'programId',
  intakeId: 'intakeId',
  status: 'status',
  notes: 'notes',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedSteps: 'completedSteps',
  currentStep: 'currentStep',
  progress: 'progress',
  basicsComplete: 'basicsComplete',
  personalInfoComplete: 'personalInfoComplete',
  educationComplete: 'educationComplete',
  workExperienceComplete: 'workExperienceComplete',
  programInfoComplete: 'programInfoComplete',
  documentsComplete: 'documentsComplete',
  declarationComplete: 'declarationComplete',
  declarationSigned: 'declarationSigned',
  declarationDate: 'declarationDate',
  isShortCourse: 'isShortCourse',
  shortCourseDuration: 'shortCourseDuration'
};

exports.Prisma.WorkExperienceScalarFieldEnum = {
  id: 'id',
  applicationId: 'applicationId',
  applicantId: 'applicantId',
  company: 'company',
  position: 'position',
  startDate: 'startDate',
  endDate: 'endDate',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EducationHistoryScalarFieldEnum = {
  id: 'id',
  applicantId: 'applicantId',
  institutionName: 'institutionName',
  startYear: 'startYear',
  endYear: 'endYear',
  qualification: 'qualification',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  applicationId: 'applicationId',
  amount: 'amount',
  method: 'method',
  status: 'status',
  transactionId: 'transactionId',
  receiptNumber: 'receiptNumber',
  paidAt: 'paidAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdmissionScalarFieldEnum = {
  id: 'id',
  applicantId: 'applicantId',
  programId: 'programId',
  applicationId: 'applicationId',
  admissionNumber: 'admissionNumber',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  url: 'url',
  applicantId: 'applicantId',
  applicationId: 'applicationId',
  admissionId: 'admissionId',
  uploadedAt: 'uploadedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnnouncementScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  intakeId: 'intakeId',
  isPublished: 'isPublished',
  publishedAt: 'publishedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  applicantId: 'applicantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ProgramType = exports.$Enums.ProgramType = {
  DIPLOMA: 'DIPLOMA',
  CERTIFICATE: 'CERTIFICATE',
  SHORT_COURSE: 'SHORT_COURSE'
};

exports.ApplicationStatus = exports.$Enums.ApplicationStatus = {
  DRAFT: 'DRAFT',
  SUBMITTED: 'SUBMITTED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  ENROLLED: 'ENROLLED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  MTN: 'MTN',
  AIRTEL: 'AIRTEL',
  BANK: 'BANK',
  CARD: 'CARD'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.AdmissionStatus = exports.$Enums.AdmissionStatus = {
  PROVISIONAL: 'PROVISIONAL',
  CONFIRMED: 'CONFIRMED',
  DEFERRED: 'DEFERRED',
  WITHDRAWN: 'WITHDRAWN',
  GRADUATED: 'GRADUATED'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  NATIONAL_ID: 'NATIONAL_ID',
  PASSPORT_PHOTO: 'PASSPORT_PHOTO',
  PLE_CERTIFICATE: 'PLE_CERTIFICATE',
  UCE_CERTIFICATE: 'UCE_CERTIFICATE',
  UACE_CERTIFICATE: 'UACE_CERTIFICATE',
  OTHER_CERTIFICATE: 'OTHER_CERTIFICATE',
  ADMISSION_LETTER: 'ADMISSION_LETTER',
  OTHER: 'OTHER'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  APPLICATION_UPDATE: 'APPLICATION_UPDATE',
  PAYMENT_CONFIRMATION: 'PAYMENT_CONFIRMATION',
  ADMISSION_UPDATE: 'ADMISSION_UPDATE',
  GENERAL: 'GENERAL'
};

exports.Prisma.ModelName = {
  Applicant: 'Applicant',
  VerificationToken: 'VerificationToken',
  PasswordResetToken: 'PasswordResetToken',
  Intake: 'Intake',
  Program: 'Program',
  Category: 'Category',
  Application: 'Application',
  WorkExperience: 'WorkExperience',
  EducationHistory: 'EducationHistory',
  Payment: 'Payment',
  Admission: 'Admission',
  Document: 'Document',
  Announcement: 'Announcement',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
